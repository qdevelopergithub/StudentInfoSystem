@page "/"
@using StudentInfoSystem.Models
@using StudentInfoSystem.Services
@inject StudentService StudentService
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

<PageTitle>Student Information System</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="card shadow-sm">
                        <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
                            <h3 class="mb-0">
                                <i class="oi oi-people"></i> Student Information System
                            </h3>
                            <button class="btn btn-light btn-sm" @onclick="ShowAddModal">
                                <i class="oi oi-plus"></i> Add Student Info
                            </button>
                        </div>
                <div class="card-body">
                    <!-- Filter Section -->
                    <div class="row mb-4">
                        <div class="col-12">
                            <div class="card border-light">
                                <div class="card-header bg-light">
                                    <h5 class="mb-0">
                                        <i class="oi oi-filter"></i> Filter Students
                                    </h5>
                                </div>
                                <div class="card-body">
                                    <div class="row">
                                        <div class="col-md-2 mb-3">
                                            <label for="nameFilter" class="form-label">Name</label>
                                            <input type="text" class="form-control" id="nameFilter"
                                                   @oninput="OnNameInputChanged"
                                                   placeholder="Search by name..." />
                                        </div>
                                        <div class="col-md-2 mb-3">
                                            <label for="ageFilter" class="form-label">Age</label>
                                            <input type="number" class="form-control" id="ageFilter"
                                                   @oninput="OnAgeInputChanged"
                                                   min="16" max="30" step="1" placeholder="Filter by age..." />
                                        </div>
                                        <div class="col-md-2 mb-3">
                                            <label for="minMarks" class="form-label">Min Marks</label>
                                            <input type="number" class="form-control" id="minMarks"
                                                   @oninput="OnMinMarksInputChanged"
                                                   min="0" max="100" step="0.1" />
                                        </div>
                                        <div class="col-md-2 mb-3">
                                            <label for="maxMarks" class="form-label">Max Marks</label>
                                            <input type="number" class="form-control" id="maxMarks"
                                                   @oninput="OnMaxMarksInputChanged"
                                                   min="0" max="100" step="0.1" />
                                        </div>
                                        <div class="col-md-2 mb-3">
                                            <label for="gradeFilter" class="form-label">Grade</label>
                                            <select class="form-select" id="gradeFilter" @onchange="OnGradeFilterChanged">
                                                <option value="">All Grades</option>
                                                @foreach (var grade in availableGrades)
                                                {
                                                    <option value="@grade">@grade</option>
                                                }
                                            </select>
                                        </div>
                                        <div class="col-md-2 mb-3 d-flex align-items-end">
                                            <button class="btn btn-outline-secondary" @onclick="ClearFilters">
                                                <i class="oi oi-x"></i> Clear All Filters
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Statistics Section -->
                    <div class="row mb-4">
                        <div class="col-md-3">
                            <div class="card bg-info text-white">
                                <div class="card-body text-center">
                                    <h4>@totalStudents</h4>
                                    <p class="mb-0">Total Students</p>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="card bg-success text-white">
                                <div class="card-body text-center">
                                    <h4>@averageMarks.ToString("F1")</h4>
                                    <p class="mb-0">Average Marks</p>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="card bg-warning text-white">
                                <div class="card-body text-center">
                                    <h4>@filteredStudents.Count</h4>
                                    <p class="mb-0">Filtered Results</p>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="card bg-secondary text-white">
                                <div class="card-body text-center">
                                    <h4>@gradeDistribution.Count</h4>
                                    <p class="mb-0">Grade Categories</p>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Data Grid Section -->
                    <div class="row">
                        <div class="col-12">
                            <div class="card">
                                <div class="card-header bg-light d-flex justify-content-between align-items-center">
                                    <h5 class="mb-0">
                                        <i class="oi oi-table"></i> Student Records
                                    </h5>
                                </div>
                                <div class="card-body p-0">
                                    @if (isLoading)
                                    {
                                        <div class="text-center p-4">
                                            <div class="spinner-border text-primary" role="status">
                                                <span class="visually-hidden">Loading...</span>
                                            </div>
                                            <p class="mt-2">Loading students...</p>
                                        </div>
                                    }
                                    else if (filteredStudents.Any())
                                    {
                                        <div class="table-responsive">
                                            <table class="table table-hover table-striped mb-0">
                                                <thead class="table-dark">
                                                    <tr>
                                                        <th scope="col" style="width: 5%;">#</th>
                                                        <th scope="col" style="width: 25%;">
                                                            <button class="btn btn-link text-white p-0 text-decoration-none d-flex align-items-center justify-content-between" @onclick="SortByName">
                                                                Name
                                                                <i class="oi @GetSortIcon("Name") ms-2"></i>
                                                            </button>
                                                        </th>
                                                        <th scope="col" style="width: 10%;">
                                                            <button class="btn btn-link text-white p-0 text-decoration-none d-flex align-items-center justify-content-between" @onclick="SortByAge">
                                                                Age
                                                                <i class="oi @GetSortIcon("Age") ms-2"></i>
                                                            </button>
                                                        </th>
                                                        <th scope="col" style="width: 15%;">
                                                            <button class="btn btn-link text-white p-0 text-decoration-none d-flex align-items-center justify-content-between" @onclick="SortByMarks">
                                                                Marks
                                                                <i class="oi @GetSortIcon("Marks") ms-2"></i>
                                                            </button>
                                                        </th>
                                                        <th scope="col" style="width: 10%;">
                                                            <button class="btn btn-link text-white p-0 text-decoration-none d-flex align-items-center justify-content-between" @onclick="SortByGrade">
                                                                Grade
                                                                <i class="oi @GetSortIcon("Grade") ms-2"></i>
                                                            </button>
                                                        </th>
                                                        <th scope="col" style="width: 15%;">Performance</th>
                                                    </tr>
                                                </thead>
                                                <tbody>
                                                    @foreach (var student in filteredStudents)
                                                    {
                                                        <tr>
                                                            <td>@student.Id</td>
                                                            <td>
                                                                <strong>@student.Name</strong>
                                                            </td>
                                                            <td>@student.Age</td>
                                                            <td>
                                                                <span class="badge @GetMarksBadgeClass(student.Marks)">
                                                                    @student.Marks.ToString("F1")
                                                                </span>
                                                            </td>
                                                            <td>
                                                                <span class="badge @GetGradeBadgeClass(student.Grade)">
                                                                    @student.Grade
                                                                </span>
                                                            </td>
                                                            <td>
                                                                <div class="progress" style="height: 20px;">
                                                                    <div class="progress-bar @GetProgressBarClass(student.Marks)"
                                                                         role="progressbar"
                                                                         style="width: @(student.Marks)%"
                                                                         aria-valuenow="@student.Marks"
                                                                         aria-valuemin="0"
                                                                         aria-valuemax="100">
                                                                        @student.Marks.ToString("F0")%
                                                                    </div>
                                                                </div>
                                                            </td>
                                                        </tr>
                                                    }
                                                </tbody>
                                            </table>
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="text-center p-4">
                                            <i class="oi oi-people text-muted" style="font-size: 3rem;"></i>
                                            <h5 class="text-muted mt-2">No students found</h5>
                                            <p class="text-muted">Try adjusting your filter criteria.</p>
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Add Student Modal -->
@if (showAddModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header bg-primary text-white">
                    <h5 class="modal-title">
                        <i class="oi oi-plus"></i> Add New Student
                    </h5>
                    <button type="button" class="btn-close btn-close-white" @onclick="HideAddModal"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="@newStudent" OnValidSubmit="@AddStudent">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="text-danger" />
                        
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="studentName" class="form-label">Name <span class="text-danger">*</span></label>
                                <InputText id="studentName" class="@GetInputClass("Name")" 
                                          @bind-Value="newStudent.Name" placeholder="Enter student name" />
                                @if (validationErrors.ContainsKey("Name"))
                                {
                                    <div class="invalid-feedback">@validationErrors["Name"]</div>
                                }
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="studentAge" class="form-label">Age <span class="text-danger">*</span></label>
                                <InputNumber id="studentAge" class="@GetInputClass("Age")" 
                                           @bind-Value="newStudent.Age" placeholder="Enter age" />
                                @if (validationErrors.ContainsKey("Age"))
                                {
                                    <div class="invalid-feedback">@validationErrors["Age"]</div>
                                }
                            </div>
                        </div>
                        
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="studentMarks" class="form-label">Marks <span class="text-danger">*</span></label>
                                <InputNumber id="studentMarks" class="@GetInputClass("Marks")" 
                                           @bind-Value="newStudent.Marks" placeholder="Enter marks (0-100)" />
                                @if (validationErrors.ContainsKey("Marks"))
                                {
                                    <div class="invalid-feedback">@validationErrors["Marks"]</div>
                                }
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="studentGrade" class="form-label">Grade <span class="text-danger">*</span></label>
                                <InputSelect id="studentGrade" class="@GetSelectClass("Grade")" 
                                           @bind-Value="newStudent.Grade">
                                    <option value="">Select Grade</option>
                                    <option value="A">A</option>
                                    <option value="B">B</option>
                                    <option value="C">C</option>
                                    <option value="D">D</option>
                                    <option value="F">F</option>
                                </InputSelect>
                                @if (validationErrors.ContainsKey("Grade"))
                                {
                                    <div class="invalid-feedback">@validationErrors["Grade"]</div>
                                }
                            </div>
                        </div>
                        
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" @onclick="HideAddModal">
                                <i class="oi oi-x"></i> Cancel
                            </button>
                            <button type="submit" class="btn btn-primary" disabled="@isSubmitting">
                                @if (isSubmitting)
                                {
                                    <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                }
                                else
                                {
                                    <i class="oi oi-check"></i>
                                }
                                Add Student
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<Student> allStudents = new();
    private List<Student> filteredStudents = new();
    private List<string> availableGrades = new();
    private Dictionary<string, int> gradeDistribution = new();

    private string nameFilter = string.Empty;
    private int? ageFilter;
    private decimal? minMarks;
    private decimal? maxMarks;
    private string gradeFilter = string.Empty;

    private bool isLoading = true;
    private string sortField = "Name";
    private bool isAscending = true;

    private int totalStudents = 0;
    private decimal averageMarks = 0;

    // Modal and form variables
    private bool showAddModal = false;
    private bool isSubmitting = false;
    private Student newStudent = new();
    private Dictionary<string, string> validationErrors = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        isLoading = true;
        StateHasChanged();

        try
        {
            allStudents = await StudentService.GetAllStudentsAsync();
            availableGrades = await StudentService.GetDistinctGradesAsync();
            totalStudents = await StudentService.GetTotalStudentsAsync();
            averageMarks = await StudentService.GetAverageMarksAsync();

            await ApplyFilters();
            CalculateGradeDistribution();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error loading data: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task ApplyFilters()
    {
        try
        {
            
            filteredStudents = await StudentService.GetFilteredStudentsAsync(
                string.IsNullOrWhiteSpace(nameFilter) ? null : nameFilter,
                ageFilter,
                minMarks,
                maxMarks,
                string.IsNullOrWhiteSpace(gradeFilter) ? null : gradeFilter,
                sortField,
                isAscending
            );

            CalculateGradeDistribution();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error applying filters: {ex.Message}");
        }
    }

    private async Task ClearFilters()
    {
        nameFilter = string.Empty;
        ageFilter = null;
        minMarks = null;
        maxMarks = null;
        gradeFilter = string.Empty;
        
        // Clear the input fields by updating the DOM
        await JSRuntime.InvokeVoidAsync("clearInputFields");
        
        await ApplyFilters();
    }

    private async Task SortBy(string field)
    {
        if (sortField == field)
        {
            isAscending = !isAscending;
        }
        else
        {
            sortField = field;
            isAscending = true;
        }
        await ApplyFilters();
    }

    private async Task SortByName()
    {
        await SortBy("Name");
    }

    private async Task SortByAge()
    {
        await SortBy("Age");
    }

    private async Task SortByMarks()
    {
        await SortBy("Marks");
    }

    private async Task SortByGrade()
    {
        await SortBy("Grade");
    }

    private Timer? filterTimer;

    private void OnNameInputChanged(ChangeEventArgs e)
    {
        nameFilter = e.Value?.ToString() ?? string.Empty;
        OnFilterChanged();
    }

    private void OnAgeInputChanged(ChangeEventArgs e)
    {
        if (string.IsNullOrEmpty(e.Value?.ToString()))
        {
            ageFilter = null;
        }
        else if (int.TryParse(e.Value.ToString(), out int value))
        {
            ageFilter = value;
        }
        OnFilterChanged();
    }

    private void OnMinMarksInputChanged(ChangeEventArgs e)
    {
        if (string.IsNullOrEmpty(e.Value?.ToString()))
        {
            minMarks = null;
        }
        else if (decimal.TryParse(e.Value.ToString(), out decimal value))
        {
            minMarks = value;
        }
        OnFilterChanged();
    }

    private void OnMaxMarksInputChanged(ChangeEventArgs e)
    {
        if (string.IsNullOrEmpty(e.Value?.ToString()))
        {
            maxMarks = null;
        }
        else if (decimal.TryParse(e.Value.ToString(), out decimal value))
        {
            maxMarks = value;
        }
        OnFilterChanged();
    }

    private void OnGradeFilterChanged(ChangeEventArgs e)
    {
        gradeFilter = e.Value?.ToString() ?? string.Empty;
        OnFilterChanged();
    }

    private void OnFilterChanged()
    {
        // Clear existing timer
        filterTimer?.Dispose();
        
        // Set new timer to apply filters after 500ms delay
        filterTimer = new Timer(async _ => 
        {
            await InvokeAsync(async () => 
            {
                await ApplyFilters();
                StateHasChanged();
            });
        }, null, 500, Timeout.Infinite);
    }



    private void CalculateGradeDistribution()
    {
        gradeDistribution = filteredStudents
            .GroupBy(s => s.Grade)
            .ToDictionary(g => g.Key, g => g.Count());
    }

    private string GetMarksBadgeClass(decimal marks)
    {
        return marks switch
        {
            >= 90 => "bg-success",
            >= 80 => "bg-primary",
            >= 70 => "bg-info",
            >= 60 => "bg-warning",
            _ => "bg-danger"
        };
    }

    private string GetGradeBadgeClass(string grade)
    {
        return grade switch
        {
            "A" => "bg-success",
            "B" => "bg-primary",
            "C" => "bg-warning",
            "D" => "bg-danger",
            "F" => "bg-dark",
            _ => "bg-secondary"
        };
    }

    private string GetProgressBarClass(decimal marks)
    {
        return marks switch
        {
            >= 90 => "bg-success",
            >= 80 => "bg-primary",
            >= 70 => "bg-info",
            >= 60 => "bg-warning",
            _ => "bg-danger"
        };
    }

    private string GetSortIcon(string field)
    {
        if (sortField == field)
        {
            return isAscending ? "oi-sort-ascending" : "oi-sort-descending";
        }
        return "oi-sort-descending";
    }

    public ValueTask DisposeAsync()
    {
        filterTimer?.Dispose();
        return ValueTask.CompletedTask;
    }

    // Modal methods
    private void ShowAddModal()
    {
        newStudent = new Student();
        validationErrors.Clear();
        showAddModal = true;
        StateHasChanged();
    }

    private void HideAddModal()
    {
        showAddModal = false;
        newStudent = new Student();
        validationErrors.Clear();
        StateHasChanged();
    }

    // Form validation
    private bool ValidateForm()
    {
        validationErrors.Clear();
        bool isValid = true;

        // Name validation
        if (string.IsNullOrWhiteSpace(newStudent.Name))
        {
            validationErrors["Name"] = "Name is required";
            isValid = false;
        }
        else if (newStudent.Name.Length < 2)
        {
            validationErrors["Name"] = "Name must be at least 2 characters long";
            isValid = false;
        }

        // Age validation
        if (newStudent.Age <= 0)
        {
            validationErrors["Age"] = "Age must be greater than 0";
            isValid = false;
        }
        else if (newStudent.Age < 16 || newStudent.Age > 30)
        {
            validationErrors["Age"] = "Age must be between 16 and 30";
            isValid = false;
        }

        // Marks validation
        if (newStudent.Marks < 0 || newStudent.Marks > 100)
        {
            validationErrors["Marks"] = "Marks must be between 0 and 100";
            isValid = false;
        }

        // Grade validation
        if (string.IsNullOrWhiteSpace(newStudent.Grade))
        {
            validationErrors["Grade"] = "Grade is required";
            isValid = false;
        }

        return isValid;
    }

    // CSS class helper methods
    private string GetInputClass(string fieldName)
    {
        return validationErrors.ContainsKey(fieldName) ? "form-control is-invalid" : "form-control";
    }

    private string GetSelectClass(string fieldName)
    {
        return validationErrors.ContainsKey(fieldName) ? "form-select is-invalid" : "form-select";
    }

    // Add student method
    private async Task AddStudent()
    {
        if (!ValidateForm())
        {
            StateHasChanged();
            return;
        }

        isSubmitting = true;
        StateHasChanged();

        try
        {
            // Add student to database
            await StudentService.AddStudentAsync(newStudent);
            
            // Refresh data
            await LoadData();
            
            // Hide modal
            HideAddModal();
            
            // Show success message
            await JSRuntime.InvokeVoidAsync("alert", "Student added successfully!");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error adding student: {ex.Message}");
        }
        finally
        {
            isSubmitting = false;
            StateHasChanged();
        }
    }
}
